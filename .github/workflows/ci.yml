name: Main CI

on:

  push:
    branches:
      - main

# When pushing in main or merging pull request in main
#  ${{github.base_ref}} : <empty>
#  ${{github.ref_name}} : main 
# When creating pull request in dev* 
#  ${{github.base_ref}} : main 
#  ${{github.ref_name}} : 1/merge

jobs:

  syncGitPperforce:
    runs-on: [common,linux64]
    container: 
      image: fr-qafactorydev.europe.altair.com/common-linux64
      credentials: 
        username: ${{secrets.DOCKER_REGISTRY_USER}}
        password: ${{secrets.DOCKER_REGISTRY_PASSWD}}
      volumes: 
         - /etc/localtime:/etc/localtime:ro
    env: 
      P4PORT: ${{secrets.P4PORT}}
      P4USER: ${{secrets.P4USER}}
      P4PASSWD: ${{secrets.P4PASSWD}}
      RUN_FIRST_TIME: ${{secrets.RUN_FIRST_TIME}}
      P4REPOSYNCPERFORCE: "//depot/Radioss/pfake_oss_mainline3"
      P4REPOPERFORCE: "//depot/Radioss/pfake_oss_mainline_final"
      DATE_MIN_CHECK_COMMITS: "7 days ago"
      COMMIT_LIST_FILE: /tmp/commits_list
      INTEGRATE_WS: integrate_perforce

    steps:

      # Set the working dir suffixed with branch name
      - uses: haya14busa/action-cond@v1
        id: set_workdir
        with:
          cond: ${{ github.base_ref == '' }}
          if_true: ${{github.ref_name}}
          if_false: ${{github.base_ref}}

      - name: Create branch oriented WS directory & integration WS
        run: |
          mkdir -p ${{ steps.set_workdir.outputs.value }} $INTEGRATE_WS

      # Create a WS to sync git changes on a temporary repo (sync_git_perforce)
      - name: Create/Update sync_git_perforce workspace
        working-directory: ${{ steps.set_workdir.outputs.value }}
        id: perforce
        run: |
          echo $P4PASSWD | p4 login
          export P4CLIENT=$(echo "${{secrets.P4USER}}_${{ github.repository }}_sync_git_perforce" | tr '/' '_')
          echo "P4CLIENT=$P4CLIENT" >> $GITHUB_ENV
          if ! p4 client -o -t $P4CLIENT > /dev/null 2>&1; then 
            echo "Creating workspace $P4CLIENT (1st time run)"
            echo "
          Client: $P4CLIENT
          Owner:  servbot
          Root:   $PWD
          Options:        noallwrite noclobber nocompress unlocked nomodtime normdir
          SubmitOptions:  submitunchanged
          LineEnd:        local
          View:
            $P4REPOSYNCPERFORCE/... //$P4CLIENT/...
            $P4REPOSYNCPERFORCE/C/... //$P4CLIENT/C/...
            -$P4REPOSYNCPERFORCE/.git/... //$P4CLIENT/.git/...
            -$P4REPOSYNCPERFORCE/.github/... //$P4CLIENT/.github/...
            -$P4REPOSYNCPERFORCE/.p4config //$P4CLIENT/.p4config
            " | p4 client -i;
          fi

          p4 sync

          export SCRIPT_OPT=''

          # In case of first run we won't find last known commit so we force script 
          # Variable RUN_FIRST_TIME must be set to run_1 at this precise moment
          if [ "$RUN_FIRST_TIME" == "run_1" ]
          then 
            SCRIPT_OPT='--force_sync'
          else
            export RET=`p4 changes -l -c $P4CLIENT -s submitted -m 1 | head -3 | tail -1 | grep "^\s*\[ GIT INTEG \]" | sed -e "s/^.*\[ GIT INTEG \] //;s/ .*$//"`; 
            if [ -z $RET ]
            then 
              echo "Could not find any commit reference in perforce submission, if the remote perforce WS is empty (creation), set the RUN_FIRST_TIME secret variable to run_1"
              exit 1
            else 
              SCRIPT_OPT="--perforce_last_commit $RET"; fi
          fi

          echo "::set-output name=sync_option::$SCRIPT_OPT"

          echo -e "P4USER=$P4USER\nP4PORT=$P4PORT\nP4CLIENT=$P4CLIENT" > .p4config


      # Get all unsynced commit since last good one
      # If we never meet the last known commit on perforce we abort, that could mean there are more commits to into account
      # At WS creation we use the dedicated --force_sync option to accept submiting event if perforce_last_commit has not been found
      # so if this specific case fails, think to delete perforce client before re-running
      - name: Get all unsynced commit since last good one
        run: |
          sync_git_2_perforce.py \
            --git_api_url ${{ github.api_url }} \
            --git_repo ${{ github.repository }} \
            --git_user ${{ github.actor }} \
            --git_token ${{ secrets.GITHUB_TOKEN }} \
            --interval_check "${{ env.DATE_MIN_CHECK_COMMITS }}" \
            --output_file ${{ env.COMMIT_LIST_FILE }} \
            ${{ steps.perforce.outputs.sync_option }} \
            --current_commit ${{github.sha}} 

      # Create/Upgrade local git repo
      - uses: actions/checkout@v2
        with:
          path: ${{ steps.set_workdir.outputs.value }}
          clean: 'false'
          lfs: 'true'
      - name: Unshallow the git log, else we won't be able to checkout commits 
        working-directory: ${{ steps.set_workdir.outputs.value }}
        run: git fetch --unshallow

      ## For each commit found: get git files, p4 reconcile and submit
      # If some file are still opened after submit, abort
      - name: Upgrade perforce for each git commit found
        working-directory: ${{ steps.set_workdir.outputs.value }}
        run: |
          git config --global advice.detachedHead false
          while read LINE
          do
            IFS='||'; arrIN=($LINE); unset IFS;
            message="[ GIT INTEG ] ${arrIN[0]} - ${arrIN[2]}"
            echo "---------------------------------"
            echo "-- ${arrIN[0]} --"
            echo "---------------------------------"
            git checkout ${arrIN[0]}
            #p4 status
            p4 reconcile
            opened_files_nb=$(p4 opened | wc -l)
            #echo "OPENED : ${opened_files_nb}"
            if [ ${opened_files_nb} -gt 0 ]
            then 
              p4 submit -d "${message}"
              return_value=$?
              if [ $return_value -eq 0 ]
              then 
                echo "Submit done"
              else
                echo "Error while submiting"
                ### TO BE CONTINUED (email)
                exit 1
              fi
            fi

          done < ${{ env.COMMIT_LIST_FILE }}


      # Create a WS to integration (and merge on the fly) the temporary repo (sync_git_perforce) to the final destination
      # Both views are declared
      - name: Create/Update integrate workspace
        working-directory: ${{ env.INTEGRATE_WS }}
        run: |
          echo $P4PASSWD | p4 login
          export P4CLIENT=$(echo "${{secrets.P4USER}}_${{ github.repository }}_integrate_perforce" | tr '/' '_')
          # echo "P4CLIENT=$P4CLIENT" >> $GITHUB_ENV
          echo "P4CLIENT=$P4CLIENT"
          pwd
          if ! p4 client -o -t $P4CLIENT > /dev/null 2>&1; then 
            echo "Creating workspace $P4CLIENT (1st time run)"
            echo "
          Client: $P4CLIENT
          Owner:  servbot
          Root:   $PWD
          Options:        noallwrite noclobber nocompress unlocked nomodtime normdir
          SubmitOptions:  submitunchanged
          LineEnd:        local
          View:
            $P4REPOSYNCPERFORCE/... //$P4CLIENT/sync_perforce/...
            $P4REPOPERFORCE/... //$P4CLIENT/dest_perforce/...
            -$P4REPOPERFORCE/.p4config //$P4CLIENT/.p4config
            " | p4 client -i;
          fi

          # p4 sync
          echo -e "P4USER=$P4USER\nP4PORT=$P4PORT\nP4CLIENT=$P4CLIENT" > .p4config


          # In case of first run we won't find last known integrated commit integrate everything
          # Variable RUN_FIRST_TIME must be set to run_1 at this precise moment
          if [ "$RUN_FIRST_TIME" == "run_1" ]
          then
            echo "/!\\ Warning integrate all /!\\"
            p4 integrate $P4REPOSYNCPERFORCE/... $P4REPOPERFORCE/...
            export LINE=$(tail -n 1 /tmp/commits_list)
            IFS='||'; arrIN=($LINE); unset IFS;
            message="[ GIT INTEG ] ${arrIN[0]} - ${arrIN[2]}"
            p4 submit -d "$message"
            return_value=$?
            if [ $return_value -eq 0 ]
            then 
              echo "Submit done"
            else
              echo "Error while submiting"
              ### TO BE CONTINUED (email)
              exit 1
            fi

          else

            # Getting the last known integrated commit
            export LAST_KNOW_INTEG_COMMIT=`p4 changes -l -s submitted -m 1000 $P4REPOPERFORCE/... | grep "^\s*\[ GIT INTEG \]" | head -n 1 | sed -e "s/^.*\[ GIT INTEG \] //;s/ .*$//"`
            export LAST_KNOW_INTEG_COMMIT_TRUNCATED=$(echo $LAST_KNOW_INTEG_COMMIT | cut -c -16)

            # Getting all not integrated changelist (=all until last know commit)
            if [ ! -z "$LAST_KNOW_INTEG_COMMIT_TRUNCATED" ]
            then 
              export SEARCH_OPT="| grep -B 10000 \"\[ GIT INTEG \]\s*$LAST_KNOW_INTEG_COMMIT_TRUNCATED\""
              echo "Found LAST_KNOW_INTEG_COMMIT : $LAST_KNOW_INTEG_COMMIT (trunc: $LAST_KNOW_INTEG_COMMIT_TRUNCATED)"
              echo "OPT : $SEARCH_OPT"
            fi

            # For each opened
            echo "RUNNING for changelist in `p4 changes -s submitted -m 1000 $P4REPOSYNCPERFORCE/... $SEARCH_OPT | awk -F' ' '{print $2}' | sort -n`"
            for changelist in `p4 changes -s submitted -m 1000 $P4REPOSYNCPERFORCE/... $SEARCH_OPT | awk -F' ' '{print $2}' | sort -n`
            do 
              echo "---------------------------------"
              echo "-- $changelist --"
              echo "---------------------------------"

              echo "p4 integrate $P4REPOSYNCPERFORCE/...@$changelist,@$changelist $P4REPOPERFORCE/..."
              ### TO BE CONTINUED (submit + email)

            done
          fi
