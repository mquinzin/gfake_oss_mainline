name: Git Sync Perforce

on:

  push:
    branches:
      - main

  # pull_request:
  #   branches: [ main ]

# When pushing in main or merging pull request in main
#  ${{github.base_ref}} : <empty>
#  ${{github.ref_name}} : main 
# When creating pull request in dev* 
#  ${{github.base_ref}} : main 
#  ${{github.ref_name}} : 1/merge

jobs:

  # log-github-event-goodies:
  #   name: "LOG Everything on GitHub Event"
  #   runs-on: ubuntu-latest 
  #   steps:
  #     - name: Logging
  #       run: |
  #         echo "${{toJSON(github.event)}}"

  syncGitPperforce:
    runs-on: [common,linux64]
    container: 
      image: fr-qafactorydev.europe.altair.com/common-linux64
      credentials: 
        username: ${{secrets.DOCKER_REGISTRY_USER}}
        password: ${{secrets.DOCKER_REGISTRY_PASSWD}}
      volumes: 
         - /etc/localtime:/etc/localtime:ro    
    env: 
      P4PORT: ${{secrets.P4PORT}}
      P4USER: ${{secrets.P4USER}}
      P4PASSWD: ${{secrets.P4PASSWD}}
      P4CLIENT: servbot_commoncontainer_sync_git_perforce
      max_commit_check: 3

    steps:

      # # Set the working dir suffixed with branch name
      # - uses: haya14busa/action-cond@v1
      #   id: condval
      #   with:
      #     cond: ${{ github.base_ref == '' }}
      #     if_true: ${{github.ref_name}}
      #     if_false: ${{github.base_ref}}
      # - name: Use conditional value
      #   run: |
      #     echo "working-directory=${{ steps.condval.outputs.value }}" >> $GITHUB_ENV

      # - name: Create branch oriented WS directory
      #   run: mkdir -p ${{env.working-directory}}

      # # Create and update perforce WS, commercial files should not be present in this WS
      # - name: Create/Update perforce directory
      #   working-directory: ${{env.working-directory}}
      #   run: |
      #     echo $P4PASSWD | p4 login
      #     if ! p4 client -o -t $P4CLIENT > /dev/null 2>&1; then 
      #       echo "Creating workspace $P4CLIENT (1st time run ?)"
      #       echo "
      #     Client: $P4CLIENT
      #     Owner:  servbot
      #     Root:   $PWD
      #     Options:        noallwrite noclobber nocompress unlocked nomodtime normdir
      #     SubmitOptions:  submitunchanged
      #     LineEnd:        local
      #     View:
      #       //depot/Radioss/pfake_oss_mainline/... //$P4CLIENT/...
      #       -//depot/Radioss/pfake_oss_mainline/.git/... //$P4CLIENT/.git/...
      #       -//depot/Radioss/pfake_oss_mainline/.github/... //$P4CLIENT/.github/...
      #       -//depot/Radioss/pfake_oss_mainline/C/... //$P4CLIENT/C/...
      #       " | p4 client -i;
      #     fi
      #     p4 sync

      # # Get perforce last synced commit
      # - name: Get perforce last synced commit
      #   id: found_perforce_infos
      #   working-directory: ${{env.working-directory}}
      #   run: |
      #     pwd
      #     echo "::set-output name=last_commit_on_perforce::$(p4 changes -l -m 1 -s submitted ./...  | head -3 | tail -1 | sed -e "s/^.*\[ GIT INTEG \] //;s/ .*$//")"



      # Get last N commits (N is max_check), get last commits since one week (in the way not to get too much information), and then get all commits after the last one found on perforce  
      - name: Provide env variables
        id: env_variables
        run: |
          echo "::set-output name=date7daysago::$(date --date "7 days ago" +'%Y-%m-%dT%TZ')"


      - uses: octokit/request-action@v2.x
        id: commits_get_info
        with:
          route: GET /repos/${{ github.repository }}/commits?since=${{ steps.env_variables.outputs.date7daysago }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Trace"
        run: |
          echo "JSON is ${{ steps.commits_get_info.outputs.data }}"
      
      # Get all unsynced commit since last good one
      - name: Get all unsynced commit since last good one
        shell: python3 {0}
        run: |
          import json

          result_json_txt = '''
          ${{ steps.commits_get_info.outputs.data }}
          '''
          print(type(result_json_txt))
          # print(json.dumps(result_json_txt, sort_keys=True, indent=4))
          result_json = json.loads(result_json_txt)
          # print(type(result_json))
          # first_commit = result_json[0]['sha']
          # print("Fist commit is " + first_commit + "\n");
          commits_higher_than_last = []
          it = 1
          max_check = $max_commit_check
          print("max_commit_check : " + ${max_commit_check } + "\n")

          for var in result_json:
            if it > max_check:
              break

            commit = var['sha']
            print("FOUND COMMIT " + commit + "\n")
            if commit == "ab11905947223d1f543d2a5bd558357afb20192c":
              break

            commits_higher_than_last.append(commit)
            it += 1

          print("All commits to deal with are ")
          print(commits_higher_than_last)

      # # Get all unsynced commit since last good one
      # - name: Get all unsynced commit since last good one
      #   shell: python3 {0}
      #   run: |
      #     import os

      #     max_check=10
      #     # Get last N commits


      #     it=0
      #     max_check=10
      #     while True and it < max_check:
      #       print("Iteration " + str(it) + "\n")


      #     # if not os.path.isfile('/tmp/xxxxxxx'):
      #     #   print("Last COMMIT found on perforce is ${{ steps.found_perforce_infos.outputs.last_commit_on_perforce }}\n");
      #     #   test = 'icici';
      #     #   print("ICI " + test + "\n");

      #   if: steps.found_perforce_infos.outputs.last_commit_on_perforce != ''



      # For each commit run the sync




      # - name: Check current commit SHA
      #   run: echo "Current commit SHA is ${{github.sha}}"

      # - uses: octokit/request-action@v2.x
      #   id: pr_get_info
      #   with:
      #     route: GET /repos/${{ github.repository }}/commits/${{github.sha}}
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: "Build commit message"
      #   id: generate_commit_msg
      #   run: |
      #     echo "Commit message is ${{ fromJSON(steps.pr_get_info.outputs.data).commit.message }}"
      #     echo "::set-output name=commit_msg::$(echo "${{ fromJSON(steps.pr_get_info.outputs.data).commit.message }}" | sed 'H;1h;$!d;x; s/\n\n/ - /g')"

      # - name: "Check failure"
      #   run: echo "Commit informations (${{github.sha}}) could not be found. Request failed with status ${{ steps.pr_get_info.outputs.status }}"
      #   if: ${{ failure() }}

      # - name: "Check message"
      #   run: |
      #     echo "p4_description : ${{ needs.syncGitPperforce.outputs.p4_description }}"





      # # Get last git modifications, don't clean before
      # - uses: actions/checkout@v2
      #   with:
      #     path: ${{env.working-directory}}
      #     clean: 'false'

      # - name: Check files
      #   working-directory: ${{env.working-directory}}
      #   id: reconcile
      #   run: |
      #     p4 status
      #     p4 reconcile
      #     echo "::set-output name=opened_files::$(p4 opened | wc -l)"

      # - name: "Check opened files"
      #   run: |
      #     echo "opened_files : ${{ steps.reconcile.outputs.opened_files }}"          

      # - name: Submit
      #   working-directory: ${{env.working-directory}}
      #   run: |
      #     p4 submit -d "[ GIT INTEG ] ${{github.sha}} - ${{ steps.generate_commit_msg.outputs.commit_msg }}"
      #   if: ${{ steps.reconcile.outputs.opened_files > 0 }}