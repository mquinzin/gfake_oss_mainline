name: Git Sync Perforce

on:
  push:
    branches:
      - main
  pull_request:
    branches: [ main ]

# When pushing in main or merging pull request in main
#  ${{github.base_ref}} : <empty>
#  ${{github.ref_name}} : main
# When creating pull request in dev*
#  ${{github.base_ref}} : main
#  ${{github.ref_name}} : 1/merge

jobs:

  sync:

    env:
      P4PORT: ${{secrets.P4PORT}}
      P4USER: ${{secrets.P4USER}}
      P4PASSWD: ${{secrets.P4PASSWD}}
      P4CLIENT: servbot_commoncontainer_sync_git_perforce

    runs-on: [common,linux64]
    container: 
      image: fr-qafactorydev.europe.altair.com/common-linux64
      credentials: 
        username: ${{secrets.DOCKER_REGISTRY_USER}}
        password: ${{secrets.DOCKER_REGISTRY_PASSWD}}
      volumes: 
        - /etc/localtime:/etc/localtime:ro

    steps:
    
    # Set the working dir suffixed with branch name
    - uses: haya14busa/action-cond@v1
      id: condval
      with:
        cond: ${{ github.base_ref == '' }}
        if_true: ${{github.ref_name}}
        if_false: ${{github.base_ref}}
    - name: Use conditional value
      run: |
        echo "working-directory=${{ steps.condval.outputs.value }}" >> $GITHUB_ENV

    - name: Create branch oriented WS directory
      run: mkdir -p ${{env.working-directory}}

    # Commercial files should not be present in this WS
    - name: Create/Update perforce directory
      working-directory: ${{env.working-directory}}
      run: |
        echo $P4PASSWD | p4 login
        if ! p4 client -o -t $P4CLIENT > /dev/null 2>&1; then 
          echo "Creating workspace $P4CLIENT (1st time run ?)"
          echo "
        Client: $P4CLIENT
        Owner:  servbot
        Root:   $PWD
        Options:        noallwrite noclobber nocompress unlocked nomodtime normdir
        SubmitOptions:  submitunchanged
        LineEnd:        local
        View:
          //depot/Radioss/pfake_oss_mainline/... //$P4CLIENT/...
          -//depot/Radioss/pfake_oss_mainline/.git/... //$P4CLIENT/.git/...
          -//depot/Radioss/pfake_oss_mainline/.github/... //$P4CLIENT/.github/...
          -//depot/Radioss/pfake_oss_mainline/C/... //$P4CLIENT/...
          " | p4 client -i;
        fi
        p4 sync

    # Get last git modifications, don't clean before
    # - uses: actions/checkout@v2
    #   with:
    #     path: ${{env.working-directory}}
    #     clean: 'false'

    - name: Check files
      working-directory: ${{env.working-directory}}
      run: |
        p4 status
        git status
        ls -al

    # # Get last git modifications, don't clean before (way to keep persistent data)
    # - uses: actions/checkout@v2
    #   with:
    #     path: ${{env.working-directory}}
    #     clean: 'false'

#     - name: Build binaries 1
#       working-directory: ${{env.working-directory}}
#       run: |
#         pwd
#         export mydate=`date`
#         echo >> check_cache.txt
#         echo "Starting ${{ matrix.build_number }} at $mydate" >> check_cache.txt
#         sleep 5
#         export mydate=`date`
#         echo "Ending ${{ matrix.build_number }} at $mydate" >> check_cache.txt
#         echo >> check_cache.txt
#         make ext=_${{ matrix.build_number }}-${{github.run_number}}
# #        source /opt/intel/oneapi/setvars.sh
# #        source /opt/rh/devtoolset-8/enable
# #        mpirun -version
# #        gcc -v
# #        ifort -v
# #        make
# #        echo "CACHE_KEY : $GITHUB_REF_NAME - $RUNNER_ARCH"

#     - name: Check binaries
#       working-directory: ${{env.working-directory}}
#       run: |
#         pwd
#         ls -l exec/

  # qa:

  #   needs: build
  #   runs-on: [smoketest,linux64]
  #   container: 
  #     image: fr-qafactorydev.europe.altair.com/qa-linux64:mpi-last
  #     credentials: 
  #       username: ${{secrets.DOCKER_REGISTRY_USER}}
  #       password: ${{secrets.DOCKER_REGISTRY_PASSWD}}
  #     volumes: 
  #       - /etc/localtime:/etc/localtime:ro

  #   strategy:
  #     matrix:
  #       include:
  #         - build_number: build1
  #         - build_number: build2
  #         - build_number: build3
  #         - build_number: build4
  #     fail-fast: false
  #   steps:

  #   # Get last git modifications, don't clean before (way to keep persistent obj files)
  #   - uses: actions/checkout@v2
  #     with:
  #       path: ${{env.working-directory}}

  #   - uses: actions/download-artifact@v2
  #     with:
  #       name: mybins
  #       path: myexe

  #   - name: Check Env
  #     run: |
  #       pwd
  #       ls -l myexe/*_${{ matrix.build_number }}*